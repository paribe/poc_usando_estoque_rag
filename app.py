import os
import streamlit as st

from decouple import config

from langchain import hub
from langchain.agents import create_react_agent, AgentExecutor
from langchain.prompts import PromptTemplate
from langchain_community.utilities.sql_database import SQLDatabase
from langchain_community.agent_toolkits.sql.toolkit import SQLDatabaseToolkit
from langchain_groq import ChatGroq

# Configura√ß√£o da API Key do GROQ
os.environ['GROQ_API_KEY'] = config('GROQ_API_KEY')

st.set_page_config(
    page_title='Estoque GPT - GROQ',
    page_icon='‚ö°',
)
st.header('Assistente de Estoque - GROQ')

# Modelos dispon√≠veis no GROQ (muito mais r√°pidos!)
groq_models = [
    'llama3-8b-8192',      # Llama 3 8B - R√°pido e eficiente
    'llama3-70b-8192',     # Llama 3 70B - Mais potente
    'mixtral-8x7b-32768',  # Mixtral - √ìtimo para tarefas complexas
    'gemma-7b-it',         # Gemma 7B - Google
]

# Modelo padr√£o recomendado para an√°lise de dados
selected_model = 'llama3-8b-8192'

st.sidebar.markdown('### ‚ö° Powered by GROQ')
st.sidebar.markdown('**Velocidade ultra-r√°pida de infer√™ncia!**')
st.sidebar.markdown(f'**Modelo ativo:** {selected_model}')
st.sidebar.markdown('**Provider:** GROQ Lightning Fast AI')

st.write('Fa√ßa perguntas sobre o estoque de produtos, pre√ßos e reposi√ß√µes.')
st.info('üöÄ Agora com velocidade GROQ - respostas em segundos!')

user_question = st.text_input('O que deseja saber sobre o estoque?')

# Inicializar modelo GROQ
model = ChatGroq(
    groq_api_key=os.environ['GROQ_API_KEY'],
    model_name=selected_model,
    temperature=0,  # Para respostas mais consistentes em an√°lise de dados
    max_tokens=1024
)

# Conectar ao banco de dados
try:
    db = SQLDatabase.from_uri('sqlite:///estoque.db')
    st.sidebar.success("‚úÖ Banco conectado")
except Exception as e:
    st.error(f"‚ùå Erro ao conectar banco: {e}")
    st.stop()

# Configurar toolkit SQL
toolkit = SQLDatabaseToolkit(
    db=db,
    llm=model,
)

# Baixar prompt ReAct
try:
    system_message = hub.pull('hwchase17/react')
except Exception as e:
    st.error(f"‚ùå Erro ao carregar prompt: {e}")
    st.stop()

# Criar agente ReAct
agent = create_react_agent(
    llm=model,
    tools=toolkit.get_tools(),
    prompt=system_message,
)

# Configurar executor do agente
agent_executor = AgentExecutor(
    agent=agent,
    tools=toolkit.get_tools(),
    verbose=True,
    max_iterations=5,  # Limitar itera√ß√µes para velocidade
    handle_parsing_errors=True
)

# Template de prompt otimizado para GROQ
prompt = '''
Utilize os recursos dispon√≠veis para atender consultas sobre o invent√°rio da empresa. 
Voc√™ deve oferecer an√°lises detalhadas sobre mercadorias, valores, necessidades de 
reabastecimento e documentos solicitados pelos usu√°rios.
Apresente suas respostas de forma clara e organizada para facilitar a compreens√£o.
Comunique-se exclusivamente em idioma portugu√™s do Brasil.

IMPORTANTE: Seja direto e objetivo nas consultas SQL. Use GROQ's speed advantage!

Pergunta: {q}
'''
prompt_template = PromptTemplate.from_template(prompt)

# Interface de consulta
if st.button('‚ö° Consultar com GROQ'):
    if user_question:
        with st.spinner('üöÄ Consultando com velocidade GROQ...'):
            try:
                formatted_prompt = prompt_template.format(q=user_question)
                
                # Medir tempo de resposta
                import time
                start_time = time.time()
                
                output = agent_executor.invoke({'input': formatted_prompt})
                
                end_time = time.time()
                response_time = end_time - start_time
                
                # Exibir resultado
                st.markdown(output.get('output'))
                
                # Mostrar estat√≠sticas de performance
                st.sidebar.markdown('### üìä Performance')
                st.sidebar.metric("Tempo de resposta", f"{response_time:.2f}s")
                st.sidebar.markdown(f"**Modelo:** {selected_model}")
                
            except Exception as e:
                st.error(f"‚ùå Erro durante consulta: {e}")
                st.info("üí° Verifique se a GROQ_API_KEY est√° configurada corretamente")
    else:
        st.warning('Por favor, insira uma pergunta.')

# Informa√ß√µes adicionais sobre GROQ
with st.expander("‚ÑπÔ∏è Sobre GROQ vs OpenAI"):
    st.markdown("""
    **üöÄ Vantagens do GROQ:**
    - ‚ö° **Velocidade**: 10-100x mais r√°pido que OpenAI
    - üí∞ **Custo**: Significativamente mais barato
    - üîì **Open Source**: Modelos Llama, Mixtral, Gemma
    - üéØ **Especializado**: Hardware otimizado para infer√™ncia
    
    **üéØ Ideal para:**
    - Aplica√ß√µes que precisam de resposta r√°pida
    - Prototipagem e desenvolvimento
    - Aplica√ß√µes com muitas consultas
    - An√°lise de dados em tempo real
    """)

# Nota sobre configura√ß√£o
st.markdown("---")
st.caption("üí° Configure sua GROQ_API_KEY no arquivo .env para usar este assistente")